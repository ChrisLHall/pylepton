#!/usr/bin/env python

import time
import picamera
import picamera.array
import numpy as np
import scipy.misc
import cv2
import traceback

from pylepton import Lepton
import find_bumps
import watchon.client
import movement

WIDTH = 160
HEIGHT = 120
TRANSMIT_INTERVAL = 3

def AlignImages(image1, image2, shiftx, shifty):
  image1dx = cv2.Sobel(image1, cv2.CV_64F, 1, 0, ksize=3)
  image1dx *= image1dx
  image1dy = cv2.Sobel(image1, cv2.CV_64F, 0, 1, ksize=3)
  image1dy *= image1dy
  image2dx = cv2.Sobel(image2, cv2.CV_64F, 1, 0, ksize=3)
  image2dx *= image2dx
  image2dy = cv2.Sobel(image2, cv2.CV_64F, 0, 1, ksize=3)
  image2dy *= image2dy
  image1 = np.sqrt(np.add(np.power(image1dx, 2.0), np.power(image1dy, 2.0)))
  image2 = np.sqrt(np.add(np.power(image2dx, 2.0), np.power(image2dy, 2.0)))
  Normalize(image1)
  Normalize(image2)
  
  #best_ssd = 100000.0
  #best_alignment = (0, 0)
  #for dx in range (-max_dist, max_dist):
  #  temp2 = np.roll(image2, dx, 1)
  #  for dy in range (-max_dist, max_dist):
  #    sd = image1 - np.roll(temp2, dy, 0)
  #    sd *= sd
  #    ssd = np.sum(sd)
  #    if (ssd < best_ssd):
  #      best_ssd = ssd
  #      best_alignment = (dx, dy)
  #print best_alignment
  newred = np.roll(image1, shifty, 0)
  newred = np.roll(newred, shiftx, 1)
  return np.dstack((image1, image2, newred))
  
def Normalize(image):
  image += -np.amin(image)
  image /= np.amax(image)

def GetKeypointListCenter(list_of_keypoint_lists):
  total_weight = 0.0
  xTotal = 0.0
  yTotal = 0.0
  for keypoint_list in list_of_keypoint_lists:
    for kp in keypoint_list:
      x, y = kp.pt
      xTotal += x * kp.size
      yTotal += y * kp.size
      total_weight += kp.size
  if total_weight == 0.0:
    return None
  else:
    return (xTotal / total_weight, yTotal / total_weight)

def main(name = 'Cam', flip_v = False, alpha = 128, shiftx=0, shifty=0, rover = False, device = "/dev/spidev0.0"):
  # Create an array representing a 1280x720 image of
  # a cross through the center of the display. The shape of
  # the array must be of the form (height, width, color)
  a = np.zeros((HEIGHT, WIDTH, 3), dtype=np.uint8)
  lepton_buf = np.zeros((60, 80, 1), dtype=np.uint16)
  cv2.namedWindow("Pines")

  untilNextTransmit = TRANSMIT_INTERVAL
  keypointListsByFrame = [[], [], [], []]
  with picamera.PiCamera() as camera:
    camera.resolution = (WIDTH, HEIGHT)
    camera.framerate = 24
    #camera.vflip = flip_v
    camera.rotation = 180
    rawCapture =picamera.array.PiRGBArray(camera, size=(WIDTH,HEIGHT))
    #camera.start_preview()
    #camera.fullscreen = True
    # Add the overlay directly into layer 3 with transparency;
    # we can omit the size parameter of add_overlay as the
    # size is the same as the camera's resolution
    #o = camera.add_overlay(np.getbuffer(a), size=(640,480), layer=3, alpha=255, crop=(0,0,640,480), vflip=flip_v)
    try:
      time.sleep(0.2) # give the overlay buffers a chance to initialize
      with Lepton(device) as l:
        last_nr = 0
        #while True:
        for frame in camera.capture_continuous(rawCapture, format="bgr", use_video_port=True):
          _,nr = l.capture(lepton_buf)
          #if nr == last_nr:
            # no need to redo this frame
            #continue
          #last_nr = nr
          cv2.normalize(lepton_buf, lepton_buf, 0, 65535, cv2.NORM_MINMAX)
          np.right_shift(lepton_buf, 8, lepton_buf)
          output = frame
          #output.array = np.zeros((480, 640, 3), dtype='uint8')
          capture_array = output.array / 255.0
          #small_capture_array = scipy.misc.imresize(capture_array, (60, 80), interp='bilinear')
          #lepton_float = lepton_buf.astype('float')[:, :, 0] / 65535.0
          lepton_float = lepton_buf[:, :, 0].astype('float')
          Normalize(lepton_float)
          
          lepton_resize = scipy.misc.imresize(lepton_float, (HEIGHT, WIDTH), interp='bilinear').astype('float64')
          Normalize(lepton_resize)

          inverted = 255 * np.ones(lepton_resize.shape, dtype='uint8') - lepton_resize
          edgedetect = AlignImages(lepton_resize, capture_array[:, :, 1].astype('float'), shiftx, shifty)
          points, pointpic = find_bumps.DetectBlobs(inverted)
          keypointListsByFrame = [points,] + keypointListsByFrame[:-1]
          center = GetKeypointListCenter(keypointListsByFrame)
          if center != None:
            center_x, center_y = center
            cv2.circle(pointpic, (int(center_x), int(center_y)), 5, (255, 255, 0))
          
          final_array = np.zeros((HEIGHT, WIDTH, 3), dtype='float')
          #final_array += capture_array
          final_array += np.dstack((inverted, inverted, inverted))
          final_array += pointpic / 255.0
          final_array += edgedetect
          Normalize(final_array)
          final_array *= 255
          final_array = np.fliplr(np.rot90(final_array))
          #lepton_resize = scipy.misc.imresize(capture_array, (480, 640), interp='bilinear')
          #a[:, :, :] = capture_array[:,:,:]
          rawCapture.truncate(0)
          
          if untilNextTransmit <= 0 and center != None:
            untilNextTransmit = TRANSMIT_INTERVAL
            try:
              pass
              #watchon.client.ConnectAndSend((255 * capture_array).astype('uint8'))
            except Exception:
              print "Send failed."
            #watchon.client.ConnectAndSend((255 * lepton_resize).astype('uint8'))
          untilNextTransmit -= 1
          cv2.imshow("Pines", scipy.misc.imresize(final_array, (480, 640), interp='bilinear'))
          cv2.waitKey(1)
          #o.update(np.getbuffer(a))
    except Exception:
      traceback.print_exc()
    finally:
      print "Pines"
      watchon.client.Close()
      #camera.remove_overlay(o)

if __name__ == '__main__':
  from optparse import OptionParser

  usage = "usage: %prog [options] output_file[.format]"
  parser = OptionParser(usage=usage)

  parser.add_option("-f", "--flip-vertical",
                    action="store_true", dest="flip_v", default=False,
                    help="flip the output images vertically")

  parser.add_option("-n", "--name",
                    dest="name", default='Cam',
                    help="Name of this node on the server.")

  parser.add_option("-r", "--rover",
                    action="store_true", dest="rover", default=False,
                    help="Set this flag to mark this as the rover.")

  parser.add_option("-a", "--alpha",
                    dest="alpha", default=128,
                    help="set lepton overlay opacity")
                    
  parser.add_option("-x", "--shiftx",
                    dest="shiftx", default=0,
                    help="X shift of the thermal cam")
                    
  parser.add_option("-y", "--shifty",
                    dest="shifty", default=0,
                    help="Y shift of the thermal cam")

  parser.add_option("-d", "--device",
                    dest="device", default="/dev/spidev0.0",
                    help="specify the spi device node (might be /dev/spidev0.1 on a newer device)")

  (options, args) = parser.parse_args()

  main(name = options.name, flip_v = options.flip_v, alpha = options.alpha, shiftx=int(options.shiftx), shifty=int(options.shifty), rover = options.rover, device = options.device)
